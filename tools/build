#!/bin/bash

system=`uname`
targetd="library/ndll/Linux"

mkdir -p dist

build_ndll()
{	# Build the neko ndll for the current platform
	echo "→ Building hxCurl"
	mkdir -p "tmp/$system"
	mkdir -p tmp
	gcc -c -fPIC ndll/Source/curl_wrap.c -o tmp/curlw.o
	gcc -lcurl -shared -Wl,-soname,libcurl_wrap.so \
			-o tmp/libcurl_wrap.so tmp/curlw.o
	sh -c "mv tmp/libcurl_wrap.so tmp/$system/curl_wrap.ndll" || exit 1
	echo "Successfully created Neko FFI module 'curl_wrap.ndll'"
}

build_tools()
{	# build some useful tools
	haxe tools/Builder/Compile.hxml
}

run_tests()
{	# 
	echo "→ Building Unittests"
	cd tests
		haxe Compile.hxml
	cd ../tmp
		cp $system/curl_wrap.ndll curl_wrap.ndll
		neko run_tests.n
	cd ..
}

make_release()
{	# 
	echo "→ Assembling the 'release.zip' package"
	rm -rf $targetd $targetd.zip
	mkdir -p $targetd
	generate_documentation
	mkdir -p $targetd/$system
	mkdir -p $targetd/Source
	cp -r tmp/$system $targetd/ndll/
	cp -r ndll/Source $targetd/
	cp haxelib.xml $targetd/haxelib.xml
	cd dist
		7z a -tzip release.zip release > 7z.log
		haxelib test release.zip
	cd ..
}

# 
# 
generate_documentation()
{	# Invoke gendoc script
	#sh -c "./gendoc"
	echo "nop"
}

make_clean()
{	# Invoke clean script
	sh -c "./clean"
}

if [ $# -eq 0 ] || [ $1 == "all" ]
then
	build_ndll
	#run_tests
	make_release
elif [ $1 == "test" ]
then
	run_tests
elif [ $1 == "doc" ]
then
	generate_documentation
elif [ $1 == "release" ]
then
	make_release
elif [ $1 == "clean" ]
then
	make_clean
else
	echo " → hxCurl Build script -- Usage: "
	echo "	./build [all|test|doc|release|clean] "
	echo ""
fi

